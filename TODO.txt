

 - To separate between the actual game and editor, create the ability to add command line arguments to differentiate between the two

 - At some point it might be nice to try and figure out how to import raymarching for ultimate pretty

 - So what if we had two windows

How does this correlate to the idea you had that you wanted to communicate?
 

 - SetWindowPosition() is a function you can use to set the window position on the monitor
 - For the interaction system you can use function pointers inside of structs and do stuff that way



Sadly, raylib does not support multiple windows in one instance
What you can do instead is create multiple executables and then create some sort of file to transfer data over from one executable to the other

system("file.exe") will run the executable, it's included in <stdlib.h>




What is our best course of action here:





Design a rule for gameb puzzle 


Figure out how to $(SolutionDir) things to make it possible for other machines to get the imported info for things like models and textures

It would also probably be nice if you made the player a little taller

Make it more obvious when you complete a puzzle/enter into a puzzle 


At some point, you need to start using Freedom units

printf("The address of x is: %p\n", (void *)ptr);

Create ordered solutions
    - Create glaringly obvious error when player inputs buttons incorrectly




Kind of horrifically, things are not checked very well which leads to crashing when you are creating puzzles, this is probably a thing that should be fixed\

If your cursor gets stuck, meaning there is no where for it to exit one button away, reset the puzzle

Quality of life features to be added or reworked:
    - Rework the button solution sizes (some of them are too similiar to others making it difficult to discerne which is which)



- BIG TO SMALL
- COUNTER-CLOCKWISE

Remake intro to moving around since the two actions are split in two different puzzles 
Make it so you are taking the player's facing direction into affect when the player interacts

Intro to puzzles
Intro to solution to puzzles
Intro to cursor pushing


START ON GAME B

Game B stuff to do:
 - Think about the design of game b


IPC communication:
 - We are using shared memory for the game's inter-communication information
 - The main issue I see currently is figuring out how to have windows.h exist because raylib includes some but not all of it



nmake /f Makefile OUTPUT=custom_name.exe 

When it comes to the collision thing, check your timings for collision detection, you might need to call CollideAndSlide/CollideWIthWorld so that the player isn't ending
up in the floor on game start if you change the size of the ellipsoid


The rules of the puzzles:
 - Movement by use of arrow keys
 - You cannot interact with powered off puzzles
 - You cannot cursor over powered off buttons inside of puzzles
 - You can reach to the other side of the puzzle using the arrow keys
 - You can move the cursor with arrow keys on buttons that are submitted
 - You can submit buttons by pressing enter
 - To solve the puzzles, you must submit the buttons in the correct order
   - This means symbols must be submitted as:
     - Big to small for game a
     - Counter clockwise for game b
 - When you submit a button the cursor automatically gets pushed to another open button:
   - The cursor moves in counter clockwise order to another button based on the submitted buttons neighbors
   - The cursor will not push to a button that is:
     - Powered off
     - Submitted
     - Considered a "reach" button (unlike the ability to reach around with the arrow keys)


Create a better way for players to understand when the puzzle is complete

Finish gameb puzzles (create more until satisfied and before creating combination puzzles)
Redo gamea (Clean up intro, intro to cursor pushing directions)

Shared memory and 2 games at once!

Create some sort of way for players to identify the order in which they have pressed the buttons - whether the shade of the color changes or something else (change color == not colorblind ppl), or sounds getting lower/or higher

Drop the amount of polygons in the button mesh for faster loading times


Gameb starts implementing the idea of un-submitting submitted buttons?
 
Probably find a way to make it super obvious that you failed when you get stuck

Figure out why the door is in sceneb and not scenea
 
Currently working on puzzle input enabling and disabling using the enum, the puzzle allows for input when the puzzle is input incorrectly (I do not want this, input should be disabled)
Only the reset button should be enabled upon interacting with the solved puzzle for the player to reset the puzzle for whatever purpose they so desire
