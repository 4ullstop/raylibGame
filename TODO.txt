

 - To separate between the actual game and editor, create the ability to add command line arguments to differentiate between the two

 - At some point it might be nice to try and figure out how to import raymarching for ultimate pretty

 - So what if we had two windows

How does this correlate to the idea you had that you wanted to communicate?
 

 - SetWindowPosition() is a function you can use to set the window position on the monitor
 - For the interaction system you can use function pointers inside of structs and do stuff that way



Sadly, raylib does not support multiple windows in one instance
What you can do instead is create multiple executables and then create some sort of file to transfer data over from one executable to the other

system("file.exe") will run the executable, it's included in <stdlib.h>


 - Create the functionality for switch between contexts (press f and switch depending on where the mouse is hovering which you should be able to do)

What is our best course of action here:

It will probably be best if you make a shared folder for all of the shared stuff that will be needed by both games as yo u have created so far
And then have separate folders for each side of the game



Master:
 - all buttons must be navigable by arrow keys//
 - must know when the puzzle is complete by checking all of the required correct inputs
 - Create a way to exit the puzzle at any time as well as whenever it is completed
 
Create a function to check the correctness of the puzzle every time the enter button is pressed
 - Create an array of all correct locations (using our vector2 struct (not Vector2D))
 - Compare the array with the location as the buttons are being constructed to determine whether to set the "IsCorrectAnswer" bool
 - Upon pressing enter, run through all of the buttons to see if the correct ones are highlighted


 Figure out how to rotate the entire ButtonMaster struct


 IsCursorOnScreen() does exactly what you thought it would! You can use it for focusing and unfocusing the mouse cursor on the windows


 Should you load in solutions via csv file?
  - makes iteration a lot simpler
  - may be a little difficult to implement at first
  - 

  While value != NULL 
   - iterate rows every time through this while loop
   - while token != NULLL
        - iterate the columns each time through this loop 