

 - To separate between the actual game and editor, create the ability to add command line arguments to differentiate between the two

 - At some point it might be nice to try and figure out how to import raymarching for ultimate pretty

 - So what if we had two windows

How does this correlate to the idea you had that you wanted to communicate?
 

 - SetWindowPosition() is a function you can use to set the window position on the monitor
 - For the interaction system you can use function pointers inside of structs and do stuff that way



Sadly, raylib does not support multiple windows in one instance
What you can do instead is create multiple executables and then create some sort of file to transfer data over from one executable to the other

system("file.exe") will run the executable, it's included in <stdlib.h>




What is our best course of action here:



0000000E0E7FFD10
000000CD58BFFC00

Design a rule for gameb puzzle 


Figure out how to $(SolutionDir) things to make it possible for other machines to get the imported info for things like models and textures

It would also probably be nice if you made the player a little taller

Make it more obvious when you complete a puzzle/enter into a puzzle 


At some point, you need to start using Freedom units

printf("The address of x is: %p\n", (void *)ptr);


Quality of life features to be added or reworked:
    - Rework the button solution sizes (some of them are too similiar to others making it difficult to discerne which is which)



- BIG TO SMALL
- COUNTER-CLOCKWISE

Remake intro to moving around since the two actions are split in two different puzzles 
Make it so you are taking the player's facing direction into affect when the player interacts


nmake /f Makefile OUTPUT=custom_name.exe 


The rules of the puzzles:
 - Movement by use of arrow keys
 - You cannot interact with powered off puzzles
 - You cannot cursor over powered off buttons inside of puzzles
 - You can reach to the other side of the puzzle using the arrow keys
 - You can move the cursor with arrow keys on buttons that are submitted
 - You can submit buttons by pressing enter
 - To solve the puzzles, you must submit the buttons in the correct order
   - This means symbols must be submitted as:
     - Big to small for game a
     - Counter clockwise for game b
 - When you submit a button the cursor automatically gets pushed to another open button:
   - The cursor moves in counter clockwise order to another button based on the submitted buttons neighbors
   - The cursor will not push to a button that is:
     - Powered off
     - Submitted
     - Considered a "reach" button (unlike the ability to reach around with the arrow keys)


Create a better way for players to understand when the puzzle is complete

Redo gamea (Clean up intro, intro to cursor pushing directions)

Create some sort of way for players to identify the order in which they have pressed the buttons - whether the shade of the color changes or something else (change color == not colorblind ppl), or sounds getting lower/or higher

Probably find a way to make it super obvious that you failed when you get stuck

Figure out why the door is in sceneb and not scenea




You still need to decide how to tell players the amount of plain buttons that can be submitted until they start unsubmitting themselves and you also need to write the code for this bc rn the button is just set to 0 which
is gonna cause problems.


We are crashing somewhere sometimes - aren't we always





Move mouse cursor to middle of the window when f is pressed so that the mouse isn't somewhere else
 - Well you got halfway done with this, just actually need to take into account the position of the window and not be lazy about the math
 

Move player to center of play in the puzzles instead of their actual center
 - You may need to also rotate the puzzles themselves bc of the way 3D works, you get a side view of the buttons rather than a full front view
 - Meh, I can't figure this out enough, it doesn't really have to do with the rotation of the puzzle as it does player perspective, switching to orthographic or maybe even switching the FOV may help, but I haven't really tried these options yet



There are a lot of things you could do to improve the collision detection system/optimize it (this is a thing that will need to happen much later down the road)
 - First of all, rather than using the meshes themselves to detect collision, you need to make bounding boxes that will make the collision detection use much simpler and easier to run through the detection cycle
 - Then you need to look into Quadtrees or grids to help divide up the world for the collision detection routines based on the player's location - you need to do more research about these
 - I was also thinking you might be able to cache the collision somewhere so that the routine doesn't need to collect all of the data from the mesh everytime the routine is called


Breaking from the open world convetion a little bit
 - When the player has one side at a location and turns on the other window, the other window should be teleported to the location that bears the same puzzles as the other window
 - Maybe keep track of the player's location if and when they run away from a certain puzzle
 - Maybe have the window close automatically depending on which context they are in and how far away from the puzzle they activated they are


What I need to do to be complete for the section that I am working on now:
 - Create a visual inidicator for the switch box
 - Place the remaining puzzles in a good place (might involve filling out the level with some models)


Things that could be redone to make them better:
 - Make the assigning of special textures a little more easy to handle
 - Fix the UI bc a lot of it doesn't line up with what it used to

Ideas about game b now:
 - Gameb will entirely be the introduction to the connection between the two windows


Things for game b to start:
 - You'll have to design the starting area for gamea as well as gameb
 - Design the shared puzzles to be implemented


Something that could be much better about the design is the fact that I'm still not teaching the basics very well
 
 
- Now that you've fixed the player camera position, it's wonky when you lerp infront of the puzzle, fix that


- Moving from one puzzle to the other without messing around with it for a minute (shared puzzles) causes sync issues with cursor
  - maybe not anymore?
- When you enter into a puzzle, you need to check whether there are any submitted buttons, and submit them on the puzzle that is being accessed
  - Somewhere store the information of the submitted buttons
  - This list must be cleared every time you exit a shared puzzle
  - The list must be filled everytime you enter a shared puzzle
  - The list must be cleared every time the puzzle resets
Okay so this works when you have both windows open, but when only one is, it doesn't
 - Need to create some sort of buffer to store this information in?
 - Or when the memory is opened, run through the determination
 - What if the button is submitted and then unsubmitted, you need to check this case as well - or maybe not, it might just cause a visual bug that won't be seen


When you enter a puzzle that is shared:
 - The consumer must report if there have been buttons that are submitted as well as the current location of the cursor
   - We must keep track of all of the buttons that have been submitted (this is only necessary if the puzzle is shared)
   - We must keep track of the cursor's current location
   - 
 - The producer must read this report and adjust the current puzzle as needed
   - The producer must report to the consumer that it has interacted with a puzzle that is shared which will put into motion the consumer's ability to report for any changes


The current issue is, is the fact that we aren't finding the associated puzzle and instead just testing the one that the player is currently in whether they are in it or not.
 - When you enter a puzzle as a producer, you need to check against all of the puzzles in the consumer's side for the correct one and then use the correct one to make determinations
 on whether there have been submitted buttons


Where am I?:
 - It works pretty much
 - If you enter the puzzle twice the buttons become unsubmitted, need to create some sort of way to ensure that the buttons aren't getting re-upodated every single time we enter the puzzle
 
