

 - To separate between the actual game and editor, create the ability to add command line arguments to differentiate between the two

 - At some point it might be nice to try and figure out how to import raymarching for ultimate pretty

 - So what if we had two windows

How does this correlate to the idea you had that you wanted to communicate?
 

 - SetWindowPosition() is a function you can use to set the window position on the monitor
 - For the interaction system you can use function pointers inside of structs and do stuff that way



Sadly, raylib does not support multiple windows in one instance
What you can do instead is create multiple executables and then create some sort of file to transfer data over from one executable to the other

system("file.exe") will run the executable, it's included in <stdlib.h>




What is our best course of action here:



0000000E0E7FFD10
000000CD58BFFC00

Design a rule for gameb puzzle 


Figure out how to $(SolutionDir) things to make it possible for other machines to get the imported info for things like models and textures

It would also probably be nice if you made the player a little taller

Make it more obvious when you complete a puzzle/enter into a puzzle 


At some point, you need to start using Freedom units

printf("The address of x is: %p\n", (void *)ptr);


Quality of life features to be added or reworked:
    - Rework the button solution sizes (some of them are too similiar to others making it difficult to discerne which is which)



- BIG TO SMALL
- COUNTER-CLOCKWISE

Remake intro to moving around since the two actions are split in two different puzzles 
Make it so you are taking the player's facing direction into affect when the player interacts


nmake /f Makefile OUTPUT=custom_name.exe 


The rules of the puzzles:
 - Movement by use of arrow keys
 - You cannot interact with powered off puzzles
 - You cannot cursor over powered off buttons inside of puzzles
 - You can reach to the other side of the puzzle using the arrow keys
 - You can move the cursor with arrow keys on buttons that are submitted
 - You can submit buttons by pressing enter
 - To solve the puzzles, you must submit the buttons in the correct order
   - This means symbols must be submitted as:
     - Big to small for game a
     - Counter clockwise for game b
 - When you submit a button the cursor automatically gets pushed to another open button:
   - The cursor moves in counter clockwise order to another button based on the submitted buttons neighbors
   - The cursor will not push to a button that is:
     - Powered off
     - Submitted
     - Considered a "reach" button (unlike the ability to reach around with the arrow keys)


Create a better way for players to understand when the puzzle is complete

Redo gamea (Clean up intro, intro to cursor pushing directions)

Create some sort of way for players to identify the order in which they have pressed the buttons - whether the shade of the color changes or something else (change color == not colorblind ppl), or sounds getting lower/or higher

Probably find a way to make it super obvious that you failed when you get stuck

Figure out why the door is in sceneb and not scenea




You still need to decide how to tell players the amount of plain buttons that can be submitted until they start unsubmitting themselves and you also need to write the code for this bc rn the button is just set to 0 which
is gonna cause problems.


We are crashing somewhere sometimes



It might be best to find another way for game a puzzle solutions rather than the sizes of the buttons, something more easily comparable to game b (maybe even use the same symbols for the best solution)



 
