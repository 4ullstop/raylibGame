

 - To separate between the actual game and editor, create the ability to add command line arguments to differentiate between the two

 - At some point it might be nice to try and figure out how to import raymarching for ultimate pretty

 - So what if we had two windows

How does this correlate to the idea you had that you wanted to communicate?
 

 - SetWindowPosition() is a function you can use to set the window position on the monitor
 - For the interaction system you can use function pointers inside of structs and do stuff that way



Sadly, raylib does not support multiple windows in one instance
What you can do instead is create multiple executables and then create some sort of file to transfer data over from one executable to the other

system("file.exe") will run the executable, it's included in <stdlib.h>




What is our best course of action here:





Design a rule for gameb puzzle 


Figure out how to $(SolutionDir) things to make it possible for other machines to get the imported info for things like models and textures

It would also probably be nice if you made the player a little taller

Might consider separating some of the stuff in the controller, it's getting quite long



Make it more obvious when you complete a puzzle/enter into a puzzle 


The Cursor is beginning to become a little hard to discerne from the rest of the puzzle might want to end up changing the color of it


printf("The address of x is: %p\n", (void *)ptr);

Create ordered solutions
    - Create glaringly obvious error when player inputs buttons incorrectly


Contain all specialized texture locations in a struct with arrays

Figure out how to load in textures for buttons like they do in minecraft


Texture atlassing steps:
    - Assign the base texture coords upon button construction
    - Assign the special texture coords based on an enum?

Why might this not be working?:
    - UVing in blender improperly - I don't believe this is it
    - The math is working
    - You're missing a step
    - This isn't possible in raylib
